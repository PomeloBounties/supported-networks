/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The Graph networks registry entry
 */
export type HttpsThegraphComSchemasV1NetworkSchemaJson = {
  [k: string]: unknown;
} & {
  /**
   * Established name of the chain on the Graph network, i.e. mainnet, btc, arweave-mainnet, near-testnet
   */
  id: string;
  /**
   * Short display name of the network, i.e. Ethereum, BNB
   */
  shortName: string;
  /**
   * Display name of the network, i.e. Ethereum Mainnet, Bitcoin Testnet
   */
  fullName: string;
  /**
   * CAIP-2 Chain ID, i.e. eip155:1, bip122:000000000019d6689c085ae165831e93
   */
  caip2ChainId: string;
  /**
   * [optional] List of possible aliases for the chain, i.e. ethereum, eth, mainnet, eth-mainnet
   */
  aliases?: string[];
  /**
   * Whether the chain is a mainnet/testnet/devnet
   */
  networkType: "mainnet" | "testnet" | "devnet";
  relations?: {
    /**
     * Type of relation
     */
    type:
      | "testnetOf"
      | "beaconOf"
      | "forkedFrom"
      | "settlesTo"
      | "evmOf"
      | "other";
    /**
     * Id of the related network, i.e. mainnet, near-mainnet
     */
    network: string;
  }[];
  /**
   * Firehose block information
   */
  firehose?: {
    /**
     * Block type, i.e. sf.ethereum.type.v2.Block
     */
    type: string;
    /**
     * Bytes encoding, i.e. hex, 0xhex, base58
     */
    bytesEncoding: "hex" | "0xhex" | "base58";
    /**
     * Protobuf definitions on buf.build, i.e. https://buf.build/streamingfast/firehose-ethereum
     */
    bufBuildUrl: string;
    /**
     * [optional] Block model if EVM chain, i.e. base or extended
     */
    evmModel?: "base" | "extended";
  };
  genesis?: {
    /**
     * Hash of the genesis block
     */
    hash: string;
    /**
     * Block height of the genesis block
     */
    height: number;
  };
  /**
   * Symbol of the native token
   */
  nativeToken?: string;
  /**
   * [optional] Protocol name in graph-node, i.e. ethereum, near, arweave
   */
  graphNodeProtocol?: "ethereum" | "near" | "arweave" | "cosmos" | "starknet";
  /**
   * URLs for the block explorers
   */
  explorerUrls?: string[];
  /**
   * Providers studio support for the chain
   */
  studioSupport: {
    provider?:
      | "e&n"
      | "pinax"
      | "graphops"
      | "streamingfast"
      | "messari"
      | "semiotic";
    services?: (
      | "subgraph"
      | "sps"
      | "substreams"
      | "firehose"
      | "token"
      | "dataset"
    )[];
    [k: string]: unknown;
  }[];
  /**
   * Issuance rewards on the Graph Network for this chain
   */
  issuanceRewards: boolean;
  web3Icon?: string;
  /**
   * List of RPC URLs for the chain. Use {CUSTOM_API_KEY} as a placeholder for a private API key
   */
  rpcUrls?: string[];
  /**
   * List of API URLs for the chain, i.e. https://api.etherscan.io/api. Use {CUSTOM_API_KEY} as a placeholder for a private API key
   */
  apiUrls?: {
    url: string;
    type: "etherscan" | "blockscout" | "ethplorer" | "subscan" | "other";
  }[];
  /**
   * URL to the chain documentation
   */
  docsUrl?: string;
};

/**
 * The Graph networks registry
 */
export interface HttpsThegraphComSchemasV1RegistrySchemaJson {
  /**
   * Reference to this schema file
   */
  $schema: string;
  /**
   * Description of the registry
   */
  description: string;
  /**
   * Version of the registry
   */
  version: string;
  /**
   * Date and time of the last update
   */
  updatedAt: string;
  /**
   * List of networks
   */
  networks: HttpsThegraphComSchemasV1NetworkSchemaJson[];
}
